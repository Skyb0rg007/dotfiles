#!/usr/bin/bash

stowdir=/usr/local/stow

curlopts=(
    --silent
    --header "Accept: application/json"
    --header "X-GitHub-Api-Version: 2022-11-28"
)

apiurl=https://api.github.com/repos

commands=(
    autoconf
    chezscheme
    cmake
    koka
    llvm
    luarocks
    mercury
    mlkit
    smlnj
    swipl
)

# Generic method of extracting the version number from query output
clean-version () {
    sed --expression='s/^[^0-9]\+//' \
        --expression='s/[_]/./g' \
        --expression='s:/::g'
}

# Print the current version on apt-get
query-apt-version () {
    declare name="$1"
    printf 'Latest apt package version:\n%s ' "$name"
    apt show "$name" 2>/dev/null | grep --max-count=1 Version | clean-version
}

# Print the matching files from stow directory
query-stow-versions () {
    declare name="$1"
    echo "Available in stow directory:"
    find "$stowdir" \
        -maxdepth 1 \
        -iname "$name*" \
        -exec basename {} \;
}

# Print the tag name of the latest GitHub release
query-release-tagname () {
    declare name="$1" repo="$2"
    printf 'Latest GitHub release:\n%s ' "$name"
    curl "${curlopts[@]}" "$apiurl/$repo/releases/latest" \
        | jq --raw-output '.tag_name // error("missing tag name")' \
        | clean-version
}

# Print the name of the most recently created Git tag on the repo
query-latest-tagname () {
    declare name="$1" repo="$2"
    printf 'Latest GitHub release:\n%s ' "$name"
    curl "${curlopts[@]}" "$apiurl/$repo/tags" \
        | jq --raw-output '.[0].name' \
        | clean-version
}

# Print the contents of a given file from the master branch
query-file-content () {
    declare name="$1" repo="$2" file="$3"
    printf 'Latest GitHub release:\n%s ' "$name"
    curl "${curlopts[@]}" "$apiurl/$repo/contents/$file" \
        | jq --raw-output '.content // error("missing file")' \
        | base64 --decode \
        | clean-version
}

# Print the version suffix of the toplevel directory name
query-ftp () {
    declare name="$1" url="$2"
    printf 'Latest FTP release:\n%s ' "$name"
    curl --silent "$url" \
        | tar --gzip --list \
        | head --lines=1 \
        | clean-version
}

usage () {
    echo "latest-release <command>"
    echo "available commands:"
    for cmd in "${commands[@]}"; do
        echo "    $cmd"
    done
}

if [[ $# -ne 1 ]]; then
    echo >&2 "Invalid number of arguments"
    usage
    exit 1
fi

case "${1,,}" in
    -h|--help)
        usage
        ;;
    --completion)
        echo "complete -W '${commands[*]}' latest-release"
        ;;
    mlkit)
        query-stow-versions mlkit
        query-release-tagname mlkit melsman/mlkit
        ;;
    llvm)
        query-stow-versions llvm
        query-release-tagname llvm llvm/llvm-project
        ;;
    cmake)
        query-apt-version cmake
        query-stow-versions cmake
        query-release-tagname cmake KitWare/CMake
        ;;
    chezscheme)
        query-stow-versions chezscheme
        query-release-tagname chezscheme cisco/ChezScheme
        ;;
    koka)
        query-stow-versions koka
        query-release-tagname koka koka-lang/koka
        ;;
    mercury)
        query-stow-versions mercury
        query-latest-tagname mercury Mercury-Language/mercury
        ;;
    smlnj)
        query-apt-version smlnj
        query-stow-versions smlnj
        query-file-content smlnj smlnj/legacy config/version
        ;;
    luarocks)
        query-apt-version luarocks
        query-stow-versions luarocks
        query-latest-tagname luarocks luarocks/luarocks
        ;;
    swipl)
        query-apt-version swi-prolog
        query-stow-versions swipl
        query-file-content swipl SWI-Prolog/swipl-devel VERSION
        ;;
    autoconf)
        query-apt-version autoconf
        query-stow-versions autoconf
        query-ftp autoconf https://ftp.gnu.org/gnu/autoconf/autoconf-latest.tar.gz
        ;;
    *)
        echo >&2 "Invalid argument $1"
        usage
        exit 1
        ;;
esac
